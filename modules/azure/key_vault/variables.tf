variable "name" {
  description = <<EOD
    (Required) Specifies the name of the Key Vault.
    Changing this forces a new resource to be created.
    The name must be globally unique.
    If the vault is in a recoverable state then the vault will need to be purged before reusing the name.
  EOD
  type        = string
}

variable "location" {
  description = <<EOD
    (Required) Specifies the supported Azure location where the resource exists.
    Changing this forces a new resource to be created.
  EOD
  type        = string
}

variable "resource_group_name" {
  description = <<EOD
    (Required) The name of the resource group in which to create the Key Vault.
    Changing this forces a new resource to be created.
  EOD
  type        = string
}

variable "sku_name" {
  description = <<EOD
    (Required) The Name of the SKU used for this Key Vault.
    Possible values are standard and premium.
  EOD
  type        = string
}

variable "tags" {
  description = <<EOD
    (Optional) A mapping of tags to assign to the resource.
  EOD
  default     = null
  type        = map(string)
}

variable "key_vault_secrets" {
  description = <<EOD
    (Optional) Created by azurerm_key_vault_secret subresource.
    A map of zero or more key_vault_secret blocks supports the following:
    - name - (Required) Specifies the name of the Key Vault Secret.
      Changing this forces a new resource to be created.
    - value - (Required) Specifies the value of the Key Vault Secret.
      Can be entered directly as a literal, or generated by Terraform.
      'value.random' is passed directly to the 'random_secret' module.
      Note: Key Vault strips newlines. To preserve newlines in multi-line secrets try replacing them with \n or by base 64 encoding them with replace(file("my_secret_file"), "/\n/", "\n") or base64encode(file("my_secret_file")), respectively.
    - key_vault_id - (Required) Not collected as the module already knows it.
  EOD
  default     = {}
  type = map(object({
    name = string
    value = object({
      literal = optional(string, null)
      random  = optional(any, null)
    })
  }))
  # Either secrets is {}, or exactly one of literal and random variables of the value variables should have a value
  validation {
    condition = (
      var.secrets == {} ||
      alltrue([
        for secret in var.secrets :
        (
          try(secret.value.literal, null) != null &&
          try(secret.value.random, null) == null
        ) ||
        (
          try(secret.value.literal, null) == null &&
          try(secret.value.random, null) != null
        )
      ])
    )
    error_message = "Exactly one of 'literal' and 'random' variables of the 'value' variables of the 'key_vault_secrets' variable should have a value, not none, not both!"
  }
}